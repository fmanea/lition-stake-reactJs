{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","root","width","margin","height","spacing","Login","result","state","isGenesisPhase","stakedTokens","txNumber","txCost","parseFloat","nodeCategory","tokenPrice","useCases","genesisPhaseCheckboxState","handleChange","bind","handleCheckboxChange","evt","this","setState","target","name","value","checkDisableGenesisPhase","newTxNumber","checked","classes","className","style","background","FormGroup","type","onChange","Label","for","Input","id","disabled","toFixed","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c9f3e895.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 300,\n  },\n  margin: {\n    height: theme.spacing(3),\n  },\n}));\n\nconst marks = [\n  {\n    value: 0,\n    label: '0',\n  },\n  {\n    value: 5\n  },\n  {\n    value: 10\n  },\n  {\n    value: 15\n  },\n  {\n    value: 20,\n    label: '20k',\n  },\n  {\n    value: 40 ,\n    label: '40k',\n  },\n  {\n    value: 60,\n    label: '60k',\n  },\n  {\n    value: 80,\n    label: '80k',\n  },\n  {\n    value: 100,\n    label: '100k',\n  },\n];\n\nfunction valuetext(value) {\n  return `${value}k`;\n}\n\nfunction valueLabelFormat(value) {\n  return marks.findIndex(mark => mark.value === value) + 1;\n}\n\n\nclass Login extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      stakedTokens: 1000,\n      tokenPrice: 0.1,\n      useCases: 4,\n      txNumber: 80000,\n      txCost: 0.01,\n      nodeCategory: 1.0,\n      isGenesisPhase: false,\n      genesisPhaseCheckboxState: false,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n\n  }\n\n  result = () => {\n    if (this.state.isGenesisPhase == true) {\n      return (this.state.stakedTokens * 0.00001 * this.state.txNumber * this.state.txCost / 800 * parseFloat(this.state.nodeCategory) * 2.74);\n    }\n    return (this.state.stakedTokens * 0.00001 * this.state.txNumber * this.state.txCost / 800 * parseFloat(this.state.nodeCategory));\n  };\n\n\n  handleChange(evt) {\n    // check it out: we get the evt.target.name (which will be either \"email\" or \"password\")\n    // and use it to target the key on our `state` object with the same name, using bracket syntax\n    this.setState({ [evt.target.name]: evt.target.value }, () => this.checkDisableGenesisPhase());\n    if ( evt.target.name == \"useCases\" )\n    {\n      let newTxNumber = evt.target.value * 20000;\n      this.setState( { \"txNumber\" : newTxNumber }, () => this.checkDisableGenesisPhase());\n    }\n    \n  }\n\n  checkDisableGenesisPhase(){\n\n    if ( (this.result() * 365) > (this.state.tokenPrice * this.state.stakedTokens * 0.2)) \n    {\n      this.setState( { \"genesisPhaseCheckboxState\" : true } );\n      this.setState ({ \"isGenesisPhase\" : false});\n    }\n    else\n    {\n      this.setState( { \"genesisPhaseCheckboxState\" : false } );\n    }\n\n  }\n\n  handleCheckboxChange(evt) {\n    this.setState({ [evt.target.name]: evt.target.checked });\n  }\n\n\n  render() {\n    const classes = makeStyles(theme => ({\n      root: {\n        width: 300,\n      },\n      margin: {\n        height: theme.spacing(3),\n      },\n    }));\n    return (\n      <div className={classes.root} style={{background: 'linear-gradient(#48D376, #30ACC1)'}} >\n        <form>\n          <FormGroup>\n            <label>Staked Tokens</label>\n            <input type=\"number\" name=\"stakedTokens\" value={this.state.stakedTokens} onChange={this.handleChange} />\n          </FormGroup>\n\n          <FormGroup>\n            <label>Lition Token Price(USD)</label>\n            <input type=\"number\" name=\"tokenPrice\" value={this.state.tokenPrice} onChange={this.handleChange} />\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"useCasesSelect\">Use Cases</Label>\n            <Input type=\"select\" name=\"useCases\" id=\"useCasesSelect\" onChange={this.handleChange} >\n              <option value=\"4\">4</option>\n              <option value=\"8\">8</option>\n              <option value=\"30\">30</option>\n              <option value=\"60\">60</option>\n            </Input>\n          </FormGroup>\n          <FormGroup>\n            <label>Average Number of Transactions</label>\n            <input type=\"number\" name=\"txNumber\" value={this.state.txNumber} onChange={this.handleChange} />\n          </FormGroup>\n\n          <FormGroup>\n            <label>Cost Per Transaction(USD)</label>\n            <input type=\"number\" name=\"txCost\" value={this.state.txCost} onChange={this.handleChange} />\n          </FormGroup>\n\n          <FormGroup>\n            <Label for=\"nodeCategorySelect\">Node Category</Label>\n            <Input type=\"select\" name=\"nodeCategory\" id=\"nodeCategorySelect\" onChange={this.handleChange} >\n              <option value=\"1\">Node</option>\n              <option value=\"2\">Trust Node</option>\n              <option value=\"1.2\">Lition Pool Staking 1 Month</option>\n              <option value=\"1.4\">Lition Pool Staking 3 Months</option>\n              <option value=\"1.6\">Lition Pool Staking 6 Months</option>\n              <option value=\"1.8\">Lition Pool Staking 12 Months</option>\n            </Input>\n          </FormGroup>\n\n          <FormGroup>\n            <label>Genesis Phase Activated</label>\n            <input type=\"checkbox\" name=\"isGenesisPhase\" className=\"form-check-input\" onChange={this.handleCheckboxChange} checked={this.state.isGenesisPhase} disabled={this.state.genesisPhaseCheckboxState} />\n          </FormGroup>\n\n          <FormGroup>\n            <label>My Current Lition Value(USD) =    </label>\n            <label>{(this.state.tokenPrice * this.state.stakedTokens).toFixed(2) + \"$\"}</label>\n          </FormGroup>\n\n          <FormGroup>\n            <label>Average Daily Earning(USD) =    </label>\n            <label>{(this.result()).toFixed(2) + \"$\"}</label>\n          </FormGroup>\n\n          <FormGroup>\n            <label>Average Monthly Earning(USD) =    </label>\n            <label>{(this.result() * 30).toFixed(2) + \"$\"}</label>\n          </FormGroup>\n\n          <FormGroup>\n            <label>Average Yearly Earning(USD) =    </label>\n            <label>{(this.result() * 365).toFixed(2) + \"$\"}</label>\n          </FormGroup>\n\n          <FormGroup>\n            <label>Annual Staking Rate =    </label>\n            <label>{(this.result() * 365 / this.state.tokenPrice / this.state.stakedTokens * 100).toFixed(2) + \"%\"}</label>\n          </FormGroup>\n          <label>Assumption: Lition Transaction is always 10% of Lition Price</label>\n          <FormGroup>\n            <label>Contribute 1 lit for this community tool (ETH Wallet) =    </label>\n            <label>0x8e4b7c6aE8EC30cbf7Bb6F0a6DD87AB96e3710eb</label>\n          </FormGroup>\n          <FormGroup>\n            <label>GitHub Link for improvements =    </label>\n            <a>https://github.com/fmanea/lition-stake-reactJs.git/</a>\n          </FormGroup>\n          <FormGroup>\n            <label>Medium article used for calculation =    </label>\n            <a>https://medium.com/lition-blog/lit-staking-update-33d4035082c8</a>\n          </FormGroup>\n\n        </form>\n      {/* A JSX comment \n\n        <div className={classes.margin} />\n        <Typography id=\"discrete-slider-small-steps\" gutterBottom>\n          Custom marks\n      </Typography>\n        <Slider\n          defaultValue={0}\n          getAriaValueText={valuetext}\n          aria-labelledby=\"discrete-slider-small-steps\"\n          step={1}\n          valueLabelDisplay=\"auto\"\n          marks={marks}\n          min={0}\n          max={100}\n        /> */}\n       \n      </div>\n    );\n  }\n}\n\n\nfunction App() {\n  return (new Login()\n    /*\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n    */\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}